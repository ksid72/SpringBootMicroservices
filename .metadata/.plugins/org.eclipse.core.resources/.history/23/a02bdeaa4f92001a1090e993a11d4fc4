package com.example.demo.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import com.example.demo.entity.ArticleEntity;
import com.example.demo.repository.ArticleRepository;


@Service
public class ArticleServiceImpl implements ArticleService{
	
	private final static Logger LOGGER = Logger.getLogger(ArticleServiceImpl.class.getName());

     
    @Autowired
    ArticleRepository repository;
     
     
    public ArticleEntity addArticle(ArticleEntity entity)
    {
    	
        Optional<ArticleEntity> articleEntity = Optional.ofNullable(repository.findByStringID(entity.getId()));
       
         
        if(articleEntity.isPresent())
        {
                 
            return articleEntity.get();
            
        } else {
            entity = repository.save(entity);
             
            return entity;
        }
    }



	@Override
	public ArticleEntity getArticle(String id) {
		
		 Optional<ArticleEntity> articleEntity = Optional.ofNullable(repository.findByStringID(id));
	       
         
	        if(articleEntity.isPresent())
	        {
	                 
	            return articleEntity.get();
	            
	        } else {
	            
	             
	            return null;
	        }
	}



	@Override
	public List<ArticleEntity> getAllArticles(Integer pageNo, Integer pageSize, String sortBy) {
		
		Pageable paging = PageRequest.of(pageNo, pageSize, Sort.by(sortBy));
		 
        Page<ArticleEntity> pagedResult = repository.findAll(paging);
         
        if(pagedResult.hasContent()) {
            return pagedResult.getContent();
        } else {
            return new ArrayList<ArticleEntity>();
        }
	}



	@Override
	public void deleteArticle(ArticleEntity entity) {
		
		repository.delete(entity);	

	}



	@Override
	public List<ArticleEntity> getAllArticles() {
		return repository.findAll();
	}



	
     
   
}