package com.example.demo.controller;

import java.util.Arrays;
import java.util.Date;
import java.util.logging.Logger;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.dto.ArticleDTO;
import com.example.demo.entity.ArticleEntity;
import com.example.demo.service.ArticleService;

@RestController
public class ArticleController {

	private final static Logger LOGGER = Logger.getLogger(ArticleController.class.getName());

	@Autowired
	private ArticleService articleService;
	
	@GetMapping(value="/api/articles/{id}")
	public ResponseEntity<ArticleEntity> getArticle(@PathVariable String id) {

		ArticleEntity result = articleService.getArticle(id);
		
		return new ResponseEntity<ArticleEntity>(result, HttpStatus.CREATED);
	}
	
	
	@GetMapping(value="/api/articles")
	public ResponseEntity<ArticleEntity> getAllArticles() {

		ArticleEntity result = articleService.getArticle(id);
		
		return new ResponseEntity<ArticleEntity>(result, HttpStatus.CREATED);
	}

	@PostMapping(value = "/api/articles")
	public ResponseEntity<ArticleEntity> addArticle(@Valid @RequestBody ArticleDTO articleDTO) {

		if (articleDTO.getTitle() != null && articleDTO.getBody() != null && articleDTO.getDescription() != null) {

			if (articleDTO.getTitle().length() < 1 || articleDTO.getBody().length() < 1
					|| articleDTO.getDescription().length() < 1) {

				return new ResponseEntity<ArticleEntity>(HttpStatus.BAD_REQUEST);

			}

			ArticleEntity entity = new ArticleEntity();
			entity.setTitle(articleDTO.getTitle());
			entity.setBody(articleDTO.getBody());
			entity.setDescription(articleDTO.getDescription());
			// adding tags
			entity.setTags(articleDTO.getTags());
			// adding created Date
			entity.setCreatedAt(new Date());
			// adding update Date
			entity.setUpdatedAt(new Date());
			// adding default favorite as false
			entity.setFavorited(false);
			// adding default count as 0
			entity.setFavoritesCount(0);

			ArticleEntity result = articleService.addArticle(entity);

			return new ResponseEntity<ArticleEntity>(result, HttpStatus.CREATED);
		}

		return new ResponseEntity<ArticleEntity>(HttpStatus.INTERNAL_SERVER_ERROR);

	}

	
	@PutMapping(value = "/api/articles/{id}")
	public ResponseEntity<ArticleEntity> updateArticle(@RequestBody ArticleDTO articleDTO,@PathVariable String id) {

		if (articleDTO.getTitle() != null || articleDTO.getBody() != null || articleDTO.getDescription() != null || articleDTO.getTags()!=null) {


			ArticleEntity entity = articleService.getArticle(id);
			
			
			if(articleDTO.getTitle()!=null && articleDTO.getTitle().length() > 0) {
				entity.setSlug(entity.getTitle());
				entity.setTitle(articleDTO.getTitle());
			}

			if (articleDTO.getBody() != null && articleDTO.getBody().length() > 0) {
				entity.setSlug(entity.getBody());
				entity.setBody(articleDTO.getBody());
			}

			if (articleDTO.getDescription() != null && articleDTO.getDescription().length() > 0) {
				entity.setSlug(entity.getDescription());
				entity.setDescription(articleDTO.getDescription());
			}	

			if (articleDTO.getTags() != null && articleDTO.getTags().length > 0) {
				entity.setSlug(Arrays.toString(entity.getTags()));
				entity.setTags(articleDTO.getTags());
			}

			ArticleEntity result = articleService.addArticle(entity);

			return new ResponseEntity<ArticleEntity>(result, HttpStatus.CREATED);
		}

		return new ResponseEntity<ArticleEntity>(HttpStatus.BAD_REQUEST);
	}

	

}
